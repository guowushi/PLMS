package plms.client;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import PLMS.frames.AbstractMessage;
import PLMS.Messages.IKeepAliveMessage;
import PLMS.Messages.KeepAliveMessage;
import PLMS.Messages.LoginMessage;
import PLMS.Utils.MessageOperation;
import PLMS.Utils.SessionUtil;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;

import org.apache.mina.core.session.IoSession;

/**
 * Created by IntelliJ IDEA.
 */
public class clientGUI {


    private JSplitPane tab1;
    private JTextArea textArea1;
    private JButton loginButton;
    private JButton keepAliveButton;
    private JButton connectButton;
    private JButton a4ErrorButton;
    private JButton quitButton;

    Demo1Client client;
    IoSession session = null;

    public clientGUI() {
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                LoginMessage msg = new LoginMessage(0x3030, 0xea03, 0);

                // MessageOperation opt = new MessageOperation(plms.client.currentSession);
                //  opt.sendMessage(msg);
                SessionUtil util = (SessionUtil) client.currentSession.getAttribute("UTIL");
                //  System.out.print(util.getTimeStamp());
                util.sendMessage(msg);

                /*             new Thread(new Runnable() {
                    @Override
                    public void run() {
                        //登录
                        LoginMessage msg = new LoginMessage(0, 0x3030, 0xea03);

                        // MessageOperation opt = new MessageOperation(plms.client.currentSession);
                        //  opt.sendMessage(msg);
                        SessionUtil util = (SessionUtil) plms.client.currentSession.getAttribute("UTIL");
                        //  System.out.print(util.getTimeStamp());
                        util.sendMessage(msg);
                        //  plms.client.currentSession.setAttribute("UTIL", util);
                        //ClientMessageUtil.sendMessage(plms.client.currentSession, msg);
                        System.out.print("ok");
                    }
                }).start();*/

            }
        });
        connectButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 连接
                client = new Demo1Client();
                client.loadConfig("client.xml");
                client.connectServer("127.0.0.1", 3005);


            }
        });
        quitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                client.closeConnection();
            }
        });
        keepAliveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //创建一个定时执行的线程池
                ScheduledExecutorService scheduExec = Executors.newScheduledThreadPool(1);
                Runnable job = new Runnable() {
                    @Override
                    public void run() {
                        // 发送keepAlive
                        // -----------------------------------------------------------------
                        MessageOperation opt = new MessageOperation(client.currentSession);
                        IKeepAliveMessage msg = (IKeepAliveMessage) opt.createMessage(KeepAliveMessage.class);
                        msg.setMainStationAddress(0);
                        msg.setRegionAddress(0x3030);
                        msg.setTermialAddress(0xEA03);
                        opt.sendMessage((AbstractMessage) msg);
                    }
                };
                // 执行任务
                scheduExec.scheduleWithFixedDelay(
                        job,    //要执行的任务
                        1000 * 5,  // 5000ms
                        1000 * 10,  //10s
                        TimeUnit.MILLISECONDS);

            }
        });
        a4ErrorButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SessionUtil util = (SessionUtil) client.currentSession.getAttribute("UTIL");
                util.getWaitingAnswer().poll();
            }
        });
    }

    public Container getPanel() {
        return tab1;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        tab1 = new JSplitPane();
        tab1.setOrientation(0);
        textArea1 = new JTextArea();
        textArea1.setText("");
        tab1.setRightComponent(textArea1);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:max(d;4px):noGrow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        tab1.setLeftComponent(panel1);
        connectButton = new JButton();
        connectButton.setText("(1)Connect");
        CellConstraints cc = new CellConstraints();
        panel1.add(connectButton, cc.xy(1, 1));
        loginButton = new JButton();
        loginButton.setText("(2)Login");
        panel1.add(loginButton, cc.xy(1, 3));
        keepAliveButton = new JButton();
        keepAliveButton.setText("(3)KeepAlive");
        panel1.add(keepAliveButton, cc.xy(1, 5));
        a4ErrorButton = new JButton();
        a4ErrorButton.setText("(4)Error");
        panel1.add(a4ErrorButton, cc.xy(1, 7));
        quitButton = new JButton();
        quitButton.setText("(5)Quit");
        panel1.add(quitButton, cc.xy(1, 9));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return tab1;
    }
}
